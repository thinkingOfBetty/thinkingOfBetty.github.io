<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>火狐中deep样式异常排查</title>
      <link href="/2020/06/04/less-deep/"/>
      <url>/2020/06/04/less-deep/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;原因就是如果给父级元素加了/deep/，那么子级元素就不需要再加/deep/了。如果加上了的话，在谷歌浏览器对样式没有影响，但是打包后在火狐中样式会异常。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IE下get请求报错排查</title>
      <link href="/2020/06/04/IE-queryString/"/>
      <url>/2020/06/04/IE-queryString/</url>
      
        <content type="html"><![CDATA[<p> &emsp;&emsp;报错原因：在ie下pathInfo的编码方式为UTF-8，而queryString的编码方式是GB2312编码（谷歌、火狐都是UTF-8），所以后台解析不了queryString中的内容，也就报错了。<br> &emsp;&emsp;解决方法：使用encodeURI对url进行包裹，或者是将get请求改成post。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>页面加载过多DOM节点导致卡顿的优化实践</title>
      <link href="/2020/03/05/speed-optimize/"/>
      <url>/2020/03/05/speed-optimize/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;安全运营中心新工单首页的工单详情——误判确认环节在开发时，确认的该节点展示的ioc条数最多为20条，但是实际上线后却发现展示的条数最多为1000条（这1000条数据展开来还有表格、图表等节点），所以当某条工单拥有1000条ioc节点时，不仅页面空白时间长，而且当数据加载完之后会直接导致网页崩溃。。</p><p>&emsp;&emsp;之前优化的方案：1000条数据不一次性加载，而是10条10条加载，这样子加载可以减少空白的时间，更快地渲染数据，但是这样优化的缺点就是在数据加载的过程中，滚动条会一直缩小，导致数据加载过程中滚动条几乎滚动不了，等到数据加载完成后，页面依旧会卡顿。</p><p>&emsp;&emsp;目前的优化方案主要有两方面，交互层面控制ioc展示的数量（最多只展示100条），前端代码层面的优化主要有如下两点：</p><p>一、一次性加载所有的数据，但是不提前渲染没打开的ioc内部Dom节点，只渲染需要提交给后台的节点。</p><p>二、用对象映射+render渲染的方式取代在template中用大量的v-else-if判断渲染哪个组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">map对象写法：</span><br><span class="line">[ORDER_STAGE_TYPE.notReady]: &#123;</span><br><span class="line">    name: <span class="string">'not-ready'</span>,</span><br><span class="line">    ref: REF_NAME,</span><br><span class="line">    props: &#123;</span><br><span class="line">        orderId: <span class="keyword">this</span>.orderId,</span><br><span class="line">        stageName: <span class="keyword">this</span>.stageName</span><br><span class="line">    &#125;,</span><br><span class="line">    on: &#123;</span><br><span class="line">        <span class="string">'is-ready'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">stageName, data</span>)  </span>&#123;</span><br><span class="line">            vm.dataIsReady(stageName, data, index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">render函数写法：</span><br><span class="line"></span><br><span class="line">renderTask (renderCallback) &#123;</span><br><span class="line">    <span class="keyword">let</span> vm = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> vm.tasks.map(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (vm.shouldShowTask(item)) &#123;</span><br><span class="line">            <span class="keyword">const</span> MAP_ITEM = vm.getHandledMapItem(item, index);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> renderCallback(MAP_ITEM.name, &#123;</span><br><span class="line">                class: MAP_ITEM.class,</span><br><span class="line">                props: MAP_ITEM.props,</span><br><span class="line">                ref: MAP_ITEM.ref,</span><br><span class="line">                refInFor: <span class="literal">true</span>,</span><br><span class="line">                on: MAP_ITEM.on </span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中rener中的refInFor:true是很重要的一个属性，如果没有配置该属性，则用$refs获取的是单个对象，如果配置了则是一个数组，对于遍历dom节点获取提交给后台数据的，获取的是数组这点可是至关重要。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bug解决记录——给远程搜索框赋值后显示的是id而不是name</title>
      <link href="/2020/03/02/nextTick-select/"/>
      <url>/2020/03/02/nextTick-select/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;td描述：点击重置按钮后（前端会调用接口给表单赋值），原本显示名字的搜索框居然显示成id，而且该现象是偶现。<br>&emsp;&emsp;一开始我一直花时间在复现该td，但是我发现一直复现不了。于是直接去看代码逻辑，我起初怀疑是$set的问题，但是如果是$set的话，该问题应该是必现。后面我把问题定位在是给选择框赋值的时候，下拉框中的数据还没加载好，搜索框会因为没找到匹配的项而直接展示成id。但是当我把加载下拉框中的数据放在setTimeout中执行时，居然还没办法复现这个td时，我对这个方向的定位产生了怀疑。后面我直接把加载下拉框中的数据的代码给注释了，于是问题就复现了。。。讲真，我在复现这个问题的时候，测试跟我说的是只有线上环境的火狐浏览器才会，于是我为为了直接复现这个td花了几个小时，现在看来这样做真的傻的一匹，原因有如下两点：<br>&emsp;&emsp;<font color="red">1、测试的话并不完全可信，因为他们对于逻辑不严谨的代码产生的bug不会测试的面面俱到；<br>&emsp;&emsp;2、很多时候，留心代码的逻辑，多调试，总是能看出漏洞在哪里</font>。<br>&emsp;&emsp;那么为什么这个td是偶现呢，问题就出在了缓存。在还没重新加载下拉框中列表的时候，这个时候网页中保存的下拉框列表的数据是上一次搜索返回的，因此只要你上一次搜索的下拉列表包含了重置操作中返回的数据，就能够在下拉框中正常显示name。相反，如果上一次搜索框查询的数据不包括重置返回的数据，则会复现该td。（普通选择器没出现该bug的原因就在于普通的选择器下拉框的数据基本都是固定的，基本不存在从接口中取回的数据是下拉框中没有的情况。）所以我感觉这种不是必现的bug其实可以直接定位是不是缓存数据的问题，如果不是，再定位到其他方向上。<br>&emsp;&emsp;这个td最后的解决方案是把给选择框赋值的操作放在$nextTick中去完成。普通选择器没出现该bug的原因就在于普通的选择器下拉框的数据基本都是固定的，基本不存在从接口中取回的数据是下拉框中没有的情况。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bug解决记录——页面切换后定时器没有销毁</title>
      <link href="/2020/03/02/can&#39;t-stop-interval/"/>
      <url>/2020/03/02/can&#39;t-stop-interval/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;前几天我给首页（路由为/home）添加了一个定时器，但是我发现“/home”下跳转到“/home/order-manage”时该定时器不仅没有被清除，反而定时器被触发的时间间隔从我设定的5秒，变成了2、3秒，一开始我以为是调用定时器的库有问题，但是回想到没有改变路由之前，定时器调用的时间间隔一直是准确的。。此时我一直在调试定时器封装库的代码，而后发现created钩子居然被调用了两次，但是destroy却没有被触发，这个时候我明白了为什么定时器触发的时间间隔会变短，原因就在于创建多了一个定时器，所以两个定时器被间隔触发，看起来就好像间隔变短了。<br>&emsp;&emsp;destroy没有被触发的原因：一开始我定位的是在同个页面下，destroy中的代码没有被执行（因为当时注意到的是这两个路由指向的是同个页面，只是内容不同，现在想来这个想法好愚蠢，路由都变了，组件肯定是有被重新调用的，至于/home下的destroy没有被执行，这是因为使用了keep-alive）。<br>&emsp;&emsp;<font color="red">所以之后在公共组件（被两个页面同时使用）中使用定时器，需要监听路由的变化来判断是否要创建、销毁定时器，而不能直接创建定时器。同时，在涉及到页面之间跳转的bug时，要多考虑路由方面的问题</font>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IE缓存策略带来的问题</title>
      <link href="/2020/02/23/IE-Cache/"/>
      <url>/2020/02/23/IE-Cache/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;今天测试在ie11中发现新工单中提交到下一环节后，上一个环节还是原来的样子。因为这一块涉及了好几个接口，然后业务逻辑又比较复杂，同时因为谷歌下是正常的，所以我一开始就排除了是数据的问题，这让我几乎浪费了一天。。。<br>&emsp;&emsp;请教同事后才发现原来<font color="red">IE对同一个get请求，如果请求的参数是没有发生变化的话，默认会用缓存（尽管此时浏览器请求的接口是返回200而不是304）</font>，（同时我发现如果打开调试工具，则默认会勾选 从服务器读取最新数据，但是如果没打开调试工具，则是按照上面说的缓存策略执行）最后在请求中加上如下代码即可解决：<br>&emsp;&emsp;xhr.setRequestHeader(‘Cache-Control’,’no-cache’);<br>&emsp;&emsp;xhr.setRequestHeader(‘Pragma’,’no-cache’);</p><p>&emsp;&emsp;其实有另外一种方法就是在请求后加一个时间戳，但是这种方式使得缓存不可用，而且这样可能需要在好几个特定的请求中去写一些额外的代码。</p><p>&emsp;&emsp;感觉IE真是不好惹，但是下次排查这种还是得从接口去入手，如果觉得接口不熟悉，可以先询问对这块比较熟悉的人，这样可以大大提高效率。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>provisional headers are shown</title>
      <link href="/2020/01/09/provisional-headers-are-shown/"/>
      <url>/2020/01/09/provisional-headers-are-shown/</url>
      
        <content type="html"><![CDATA[<p>采坑记录：本地开发调用接口时显示请求头显示provisional headers are shown ；</p><p>原因是浏览器证书报错：NET::ERR_CERT_AUTHORITY_INVALID，导致请求被拦截；</p><p>解决办法：在chrome://flags/#allow-insecure-localhost中enabled #</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>路由控制权限控制</title>
      <link href="/2020/01/07/router-control/"/>
      <url>/2020/01/07/router-control/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;工单的权限控制中前端的控制分为两部分，一部分是导航栏中的入口，另一部分是隐藏注册的路由（防止用户记住路由后直接输入路径去获取资源）。工单项目中路由的隐藏主要是通过路由表的配置  + 递归处理路由表 + ROUTER.addRoutes（处理完的路由数组）来实现的。<br>&emsp;&emsp;一、目前项目权限如下所示</p><table><thead><tr><th>专家类型</th><th>菜单权限</th><th>读写权限</th><th>备注</th></tr></thead><tbody><tr><td>T1,T2,T3</td><td>除了xx管理，xx设置，其它全有</td><td>有所有权限</td><td>可查看所有客户的信息，只能查看分配给自己的工单</td></tr><tr><td>T5</td><td>所有权限</td><td>所有权限</td><td>-</td></tr><tr><td>渠道</td><td>只有工单管理（不包括xx），客户管理（不包括xx）</td><td>工单只有查看权限</td><td>只能查看自己所属渠道的客户和所属渠道客户的工单</td></tr></tbody></table><p>由于这个项目的隐藏需求都是对某个用户开放大的模块，然后再关闭里面小模块的权限，或者是关闭整个大模块的权限，所以我目前采取的配置是，一级模块可以在meta中配置允许访问的roles，然后在子级模块中配置一级路由放通权限，但是子级路由需要关闭权限的用户——在子级路由的meta中配置forbidenRoles。（这种配置方式比较适用于一级二级、三级路由有写成那种父子级的路由配置表）</p><p>&emsp;&emsp;二、具体步骤：首先用使用同步请求获取用户权限信息，然后用filter筛选出当前用户允许访问的一级路由，然后递归删除（此处的删除依旧是用的filter）子路由中不让当前用户访问的子路由。</p><p>&emsp;&emsp;三、递归删除的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteForbiddenRoutes</span> (<span class="params">routerObj, role</span>) </span>&#123;  <span class="comment">//删除不允许被当前角色访问的路由</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">get</span>(routerObj, 'meta.forbiddenRoles', []).includes(role)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(routerObj.children)) &#123;</span><br><span class="line">        <span class="keyword">const</span> ROUTES_ARR = routerObj.children;</span><br><span class="line">        <span class="keyword">let</span>  filteredArr = ROUTES_ARR.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> !<span class="keyword">get</span>(item, 'meta.forbiddenRoles', []).includes(role);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        filteredArr.forEach((item, index) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item.children)) &#123;</span><br><span class="line">                filteredArr[index].children = delChildForbiddenRoutes(item, role);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        routerObj.children = filteredArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> routerObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delChildForbiddenRoutes</span> (<span class="params">item, role</span>) </span>&#123; <span class="comment">//递归删除不允许被当前角色访问的路由</span></span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line"></span><br><span class="line">    arr = item.children.filter(<span class="function">(<span class="params">childItem</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> deleteForbiddenRoutes(childItem, role);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>非相同请求被canceled的bug排查</title>
      <link href="/2019/12/13/canceled/"/>
      <url>/2019/12/13/canceled/</url>
      
        <content type="html"><![CDATA[<p><strong>BUG描述</strong><br>&emsp;&emsp;在工单的详情页有一个跳转到设备管理的按钮（到设备页后网页会发起两个请求——一个是detail，一个是dev），一开始这个detail会报错———无效的输入，这个时候dev接口还是可以正常请求的。结果后台把detail接口报错修复之后，发现dev接口一直是被canceled的状态。一开始还以为是后台的问题，因为我们封装的请求里面是网页发起两个相同的请求时，如果前一个请求没有返回时，网页继续发起相同的请求，代码里默认是就会把前一个请求abort。直到后面后台一直说他后台没有报错，这时我调试控制台，将网速降到slow 3G之后，发现dev请求不被canceled，这时候才把问题定位在前端。其实把请求给canceled的操作只能是前端操作的，后端设置接口时只能设置成超时。我不应该一开始就把后台拉下来定位问题的。。。</p><p> <strong>排查问题</strong><br> &emsp;&emsp;定位到前端问题后，我发现sf-table里面有一个v-if，我以为是v-if为false时把sf-table给隐藏了，导致发起的请求也被终止了，但是后面一想，模板的渲染跟请求没有啥关系，要排查问题，还是得从util/request中开始排查。</p><p><strong>定位问题</strong><br> &emsp;&emsp;开始打断点，发现只要接口被canceled的时候，就会进入abortAll这个函数，于是全局搜索abortAll，发现Router.beforeEach中会去调用这个函数，这时才定位到原来dev被canceled是因为detail请求之后，路由发生了改变，此时查看detail的成功回调中，果然有操作路由的动作———router.push({query:{role:data.phase}});</p><p><strong>问题剖析</strong><br> &emsp;&emsp;因为这个detail的请求是放在vuex的action里面去做的，每次只要客户管理的模块被加载，这个action就会在mounted里被触发，而之前要解决的bug是在客户管理的客户信息下面才有这个问题，现在如果把这个改变路由的代码放在客户信息下去做，就不会有这个问题了，因为客户信息本来也只有调用detail这个接口。所以最终的解决方案就是把这个router.push({query:{role:data.phase}})放在客户信息的路由下去做（监听路由，路由中包含info时，才在调用action中把操作路由的回调给传入，在detail请求成功的回调中执行）。</p><p> <strong>问题回顾</strong><br>  &emsp;&emsp;此时查看代码提交记录，发现该代码是要解决一个td而添加的，这个td是用户打开了两个页面，在一个页面中去修改某个客户的服务项，但是在另外一个页面却没有更新客户管理模块中的客户信息的服务项，原因就是没有去加载detail的这个接口，于是mc之前改td的时候就是用watch，在路由中包含info的时候，就会去调用detial的接口，然后去更新路由的查询中的role。这样之后查询会把最新的role给带过去，写到这里我才发现，从表格进去的时候，用户可能有（3、5）这两种角色，在另外的网页中，用户可以把对应的（3、5）升级成（6、7），此时后台应该直接把前端请求的3映射成6，把请求的5映射成7，而不应该都依赖于前端去修改请求参数。要不然前端来做这种操作一般都会引发其他的问题。因为同一个页面，可能会有多个入口，没有办法保证每个入口都会给这个页面传一个role值，比如一开始的detail接口中报错———无效的参数，就是因为在详情中跳转过来没有带一个role值过来，请求的时候detail就直接报错了，这个的解决方法是后端判断role这个参数没有传值时，做了兼容的处理，同理我觉得客户信息页没有刷新也是同样的问题。<br> &emsp;&emsp;因此，涉及到这种过于依赖前端查询参数的接口的，要尽可能让后端做映射、兼容处理。</p><p>&emsp;&emsp;<strong>注意</strong> 之后遇到类似的交互场景、依靠前端这种添加路由的形式去做的要额外小心，因为后续一旦修改了路由参数的，可能又会发生类似的问题，特别是在整个大模块（下面可能会对应多个路由）mounted的时候就执行的场景。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用reflog拯救reset --hard造成的文件丢失</title>
      <link href="/2019/12/11/reflog/"/>
      <url>/2019/12/11/reflog/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;依旧记得之前的一次reset –hard给我造成的心理阴影，要是早点get到这个点，或许当初会少些焦虑。<br>接下来还原一下reset –hard之后的场景以及记录下修复时需要用到什么指令。</p><p>首先用git log查看当前的commit记录<br><img src="/2019/12/11/reflog/1.PNG" alt><br>然后用git reset –hard来强制回退commit，此时再用git log查看了之前的reflog的提交记录已经不见了<br><img src="/2019/12/11/reflog/2.PNG" alt><br>此时如果要重新找回reflog的commit，需要用git reflog查看你在git上进行的每一步操作，然后找到之前的reflog的hash，再用git reset –hard 回退到丢失的commit。<font color="red">此时如果后面有新的commit，可以结合git cherry-pick来使用</font><br><img src="/2019/12/11/reflog/3.PNG" alt><br>此时查看commit已经成功拾回。<br><img src="/2019/12/11/reflog/4.PNG" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>理解热更新原理</title>
      <link href="/2019/12/04/hot/"/>
      <url>/2019/12/04/hot/</url>
      
        <content type="html"><![CDATA[<p> &emsp;&emsp;今天学习了webpack-dev-server热更新的原理，大致的意思就是借助express启动的websocket让浏览器跟本地服务器建立双向的通信，然后通过webpack的compile的watch功能，监听文件的改变，然后通过websocker告诉浏览器最新的hash以及触发ok事件，触发ok事件之后，会通过webpack去检查更新的内容，从而去决定是reload还是进行模块替换，如果要模块替换，就调用hotApply函数进行新旧模块代码的替换，然后结合_webpack_require_去执行代码。因为这一切都涉及到当前运行环境，所以需要一开始时将websocket跟dev-server的代码塞进去bundle中，让客户端中也能执行这一块的代码。<br>&emsp;&emsp;另外两个需要注意的点就是：<br>（一）获取当前更新模块id时，是通过jsonp，可以立即直接脚本<br>（二）当webpack监听到文件变化之后，是写进内存而不是写进文件系统，这样可以加快速度。<br>自己理解画的图：<br><img src="/2019/12/04/hot/hot3.png" alt></p><p>掘金跟知乎上的图：<br><img src="/2019/12/04/hot/hot1.png" alt><br><img src="/2019/12/04/hot/hot2.jpg" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>封装load-btn</title>
      <link href="/2019/11/28/button-load/"/>
      <url>/2019/11/28/button-load/</url>
      
        <content type="html"><![CDATA[<p> &emsp;&emsp;之前由于公司组件库使用的load-btn是一直有load这个icon的，只是当loading的值为true时这个图标才会转动。但是产品线是要求该icon只在load的时候才出现。于是每次使用这个按钮，都需要使用v-if去写两次。所以需要自己重新对该load按钮进行封装。</p><p> &emsp;&emsp;接下来阐述下封装这个按钮的几个过程。</p><p>version 1.0 （接收参数：text、loading）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">load-sfv-btn</span> <span class="attr">v-if</span>=<span class="string">"loading"</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">load-sfv-btn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sfv-primary-btn</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">sfv-primary-btn</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种看着感觉没啥问题，但是等到我用另外种按钮的时候就需要额外拓展。</p><p>version 1.2 （接收参数：text、loading、type（按钮的类型有primary、differ、primary、 danger、 blank、secondary、 circle））</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"isPrimaryBtn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sfv-button-primary</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span> </span></span><br><span class="line"><span class="tag">                        <span class="attr">v-if</span>=<span class="string">"!showLoading"</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">sfv-button-primary</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sfv-button-load</span> <span class="attr">v-else</span> </span></span><br><span class="line"><span class="tag">                        <span class="attr">loading</span> </span></span><br><span class="line"><span class="tag">                        <span class="attr">class</span>=<span class="string">"sfv-btn-primary"</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">sfv-button-load</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"isNormalBtn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sfv-button</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">v-if</span>=<span class="string">"!showLoading"</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">sfv-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sfv-button-load</span> <span class="attr">v-else</span> </span></span><br><span class="line"><span class="tag">                        <span class="attr">loading</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">sfv-button-load</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时代码有点相似而冗余了，此时代码审核人mc建议这种根据不同状态展示相似组件的可以考虑用render去实现</p><p>version 1.3 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">render (createElement, context)  &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;text, loading, type&#125; = context.props, </span><br><span class="line">        domName,</span><br><span class="line">        btnClass;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (type === <span class="string">'primary'</span>) &#123;</span><br><span class="line">            domName = <span class="string">'sfv-button-primary'</span>;</span><br><span class="line">            btnClass = <span class="string">'sfv-btn-primary'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            domName = <span class="string">'sfv-button'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (loading) &#123;</span><br><span class="line">        domName = <span class="string">'sfv-button-load'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> createElement(</span><br><span class="line">            domName, text, &#123;</span><br><span class="line">                props:&#123;</span><br><span class="line">                    loading:<span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                class: btnClass</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> createElement(</span><br><span class="line">        domName, &#123;</span><br><span class="line">            on:&#123;</span><br><span class="line">                click:context.data.on[<span class="string">'on-click'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            domProps: &#123;</span><br><span class="line">                innerText: text</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时是可以看到感觉两个return应该是可以写成一个的，但是不知道为啥那个load-btn中text用domProps的形式传进去总是会有问题。此时mc觉得这种写法既不可以传slot、又不可以传其他类型的btn，感觉整个组件的灵活性比较差。此时重新看了组件源码，发现组件里面其实是通过不同的类名去区分组件的。因此有了版本1.4。</p><p>version1.4</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sfv-button</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">v-if</span>=<span class="string">"!showLoading"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:class</span>=<span class="string">"typeCls"</span>&gt;</span></span><br><span class="line">            &#123;&#123;text&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sfv-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sfv-button-load</span> <span class="attr">v-else</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">loading</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:class</span>=<span class="string">"typeCls"</span>&gt;</span></span><br><span class="line">                &#123;&#123;text&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"loadContent"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sfv-button-load</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时感觉有点兜兜转转倒回去的感觉，只是加多了多种按钮类型的拓展、同时添加了slot。但是乍一看才知道这种写法传slot的话还得传两个，既不够简洁、反而使用起来还麻烦了。<br>version1.5</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sfv-button</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:class</span>=<span class="string">"typeCls"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"icon"</span> <span class="attr">:class</span>=<span class="string">"iconCls"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"text"</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-else</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">name</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sfv-button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这次是通过动态class（公司组件中icon的展示用的是类名），感觉比上次简洁了点，但是此时还需考虑不直接使用封装好的load按钮，而是直接使用的图标控制，会不会造成原来组件功能不能使用。此时发现了一个bug，就是调用这个封装的组件时，配置disable属性是不生效的，此时有了version1.6<br>version1.6</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sfv-button</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:class</span>=<span class="string">"typeCls"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:default-disable</span>=<span class="string">"disabled"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"icon"</span> <span class="attr">:class</span>=<span class="string">"iconCls"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"content"</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sfv-button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时问题又来了，我发现这个btn组件除了disable，应该还有其他属性的，所以有了目前的终极版本，希望以后还能继续改进。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sfv-button</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:class</span>=<span class="string">"typeCls"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-bind</span>=<span class="string">"$attrs"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-on</span>=<span class="string">"$listeners"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"icon"</span> <span class="attr">:class</span>=<span class="string">"iconCls"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"content"</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sfv-button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一天花了不少时间在优化这个组件，从写重复的html，到写render函数，到写回html（加动态类型、动态icon、slot、$attr），到考虑组件库升级之后可能会发生的问题（用类型去添加icon，如果新版本把类名改了就容易出问题），感觉自己造轮子的能力还是有很大的提升空间，应该多去学习一些优秀源码的写法、设计思想。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>window.open</title>
      <link href="/2019/11/27/window-open/"/>
      <url>/2019/11/27/window-open/</url>
      
        <content type="html"><![CDATA[<p>  &emsp;&emsp;<br><img src="/2019/11/27/window-open/window.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端不要轻易轮询</title>
      <link href="/2019/11/27/polling/"/>
      <url>/2019/11/27/polling/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;如非必要，尽量不要轻易轮询。盲目地用轮询往往会增加工作量、给服务器造成负担、没有实现实际功能。这里阐述下几种本来需要前端轮询、后面变成后端控制的场景。</p><p>&emsp;&emsp;一、后端操作有延迟、比如需要社保苏醒时间等<br>&emsp;&emsp;执行某种编辑操作之后，前端在成功回调中刷新页面，结果数据不刷新。后端有某些操作是会延迟1~3秒才能真正地生效，这种情况，不要轮询、不要前端去瞎setTimeout,而是要让后端在操作真正完成之前将接口处于挂起（pending状态）。这样子才能将页面刷新的时间缩短至最小。</p><p>&emsp;&emsp;二、后端也去轮询查询<br>&emsp;&emsp;场景：后端去轮询某个接口，最长时间不超过一分钟（其实一般如果请求封装的时候有设置超时时间，可能需要考虑轮询，或者看看能不能将请求的超时时间改成可配置，默认是设置的时间，但是可以针对特定接口进行修改）。如果项目没有设置或者设置的超时时间比后端（后端去轮询一般也有设置超时时间）的要长，那么应当让后端将接口挂起，而不是轮询。</p><p>&emsp;&emsp;三、业务需求：实时更新服务截止日期。<br>&emsp;&emsp;这种轮询需要明确是否有必要，像我们的webui项目的token过期时间就是半小时，这种一般重新登录之后，会自己重新去请求服务是否过期的接口，可以不再轮询。这种情况，如果要轮询，需要尽量减少轮询的时间，比如距离服务过期还剩下一天才开始轮询或者是其他方法</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>var location = window.location引发的坑</title>
      <link href="/2019/09/29/location/"/>
      <url>/2019/09/29/location/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;之前项目修改了一个东西，就是将之前的login_url由指定的字符串改成了动态的ip，在使用了location去保存window.location之后，使得网页每次加载时都一直疯狂地请求资源，感觉是陷入了循环。这个bug我找了几个小时都没找到。当时是有发现当login_url后面加一些会报错的符号时，页面能正常加载，所以就把错误定位在了url上，可是后面一直把错误定位在后端对请求的转发造成没成功请求到资源的问题，现在仔细想，当时定位bug的思路是有很大问题的。</p><p>&emsp;&emsp;首先，我应该意识到有代码造成了循环——因为查看了网络资源确实不断地在加载。其次，我应该意识到login_url的拼写错误或者是资源定位错误都不可能会有不断加载资源的问题。所以之后想问题纯粹点，别想那些让人感觉困惑的点。如果一开始就想到循环的问题，或许能早点解决问题。</p><p>&emsp;&emsp;最后的还需要学习的就是不要用关键字作为变量名——js关键字包括，这次var location其实指代的就是window.location，如果我有在控制台进行尝试，应该是可以非常快速的发现问题的，尽管这个代码不会报错，但是在控制台造成的问题确可以让我很快地意识到问题在哪里。</p><p>&emsp;&emsp;附上一个有保留关键字的<a href="https://www.jianshu.com/p/3c2cfcc2d227" target="_blank" rel="noopener">链接</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的data函数不会对数据进行深拷贝</title>
      <link href="/2019/09/21/$data/"/>
      <url>/2019/09/21/$data/</url>
      
        <content type="html"><![CDATA[<p> &emsp;&emsp;今天代码rv的时候，审核人说不能直接修改父组件传的值，我代码里写的是 data() {return {commonForm: form}},然后通过修改commonForm的值，最后提交的也是commonform。按照常理来说，我改变commonForm确实form也会改变，但是我想起来我写了不少代码都是这种操作，但是控制台也没有警告说我修改了父组件的值，此时我以为Vue中的data函数会对数据进行深拷贝。结果后面在父组件进行监听，当加上deep:true时，发现子组件的commonForm进行修改时，父组件也会被修改，但是当没有加上deep:true时，则监听不到，由此推断出控制台监听的那种是默认为deep:false的，这种情况下，只有改变this.form对象的地址，控制台才会报错。由于这种操作确实改变了父组件的值，违反了单向数据流，所以需要使用深拷贝！！<br> &emsp;&emsp;<br><img src="/2019/09/21/$data/$data.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>forEach不能采用break或者returen false终止循环</title>
      <link href="/2019/09/21/forEach/"/>
      <url>/2019/09/21/forEach/</url>
      
        <content type="html"><![CDATA[<p> &emsp;&emsp;前几天写PPT项目代码的时候，想要找到符合条件的一项，就跳出循环，不要继续循环，结果我用了break发现没用，查了一下原来forEach要终止循环需要通过try catch。。。于是发现some是提前终止循环的。但是some也有个坑要提防，那就是some去遍历一个空数组，会返回false；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>字段值可能为undefined的处理</title>
      <link href="/2019/09/09/deal-undefined/"/>
      <url>/2019/09/09/deal-undefined/</url>
      
        <content type="html"><![CDATA[<p> &emsp;&emsp;前几天在写代码，后端传一个code值给前端，前端根据常量表决定展示的文案以及字体颜色，当code为-1时，不展示内容。因为后台有做不展示的处理，所以我误以为该字段是必定会返回的。后面出现bug才知道该字段是在某种特定类型的工单才会进行返回。于是我在页面渲染的时候用v-if=”data.code &amp;&amp; data.code !== -1”去进行判断，此时问题又来了。此前约定的code里面包含了0，而0也是要展示的，如果用这种方式进行判断，则code为0时这里的v-if的结果为false。所以之后开发应当明确两点，最大可能地避免bug。<br> &emsp;&emsp;一、明确字段是否返回，尽可能地处理字段为undifined的情况<br> &emsp;&emsp;二、处理字段为undifined时，分情况，如果该字段是一个object类型的，用loadash中的get进行处理（此处要注意loadash的按需引入方法）；如果该字段是某个对象的属性，可以用obj.hasOwnProperty进行判断，而不是用data.code &amp;&amp; xxx 去进行判断，因为这里的code可能为0或者是空字符串。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>$set采坑记</title>
      <link href="/2019/09/04/$set/"/>
      <url>/2019/09/04/$set/</url>
      
        <content type="html"><![CDATA[<p> &emsp;&emsp;前几天做后台管理系统时，里面有一个涉及到对申请者的信息修改，对原来已经有的申请者，只能进行积分的修改或者是删除申请者，同时对新增申请者可以选择姓名、调整积分。由于新增申请者跟原有申请者的操作跟展示效果都不一样，所以在展示申请者的时候，我用tag这个字段来进行区分，最后把这个tag传给后台进行数据处理。新增的obj在推入时就会一并添加一个tag属性，且其值为”add”，删除的是直接使用index对数组中某一项新增tag属性，且其值为delete。展示层对于tag值为delete的则不展示，由于tag这个属性是新增的，所以需要使用$set，否则视图层不会响应。在我添加$set之后，我发现了另外一个诡异的问题，就是在点击删除之后，后面新增的obj都不再展示。此时我打印数据，发现数据是正常的，就是被删除的obj的tag是delete，而之前新增的tag还是add，那为什么会不展示了呢？？这个问题我到现在也没搞懂，但是这个问题只有两种可能，一种是我的展示逻辑写的有问题，另一种就是vue有bug。等我去理解$set的源码或许会得到解答。<br> &emsp;&emsp;最后同事小赵提出了一种解决方案，在获取到申请者数据时，用$set循环为每一个obj添加tag属性，且该值置为空。然后后台有变动的时候，在直接修改tag属性。果然用这种方法之后，视图就正常显示了。但是我还是没搞懂这样子能解决问题的理由。。。等我找到答案时再回来更新，未完待续</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用DOMPurify处理传入给v-html内容</title>
      <link href="/2019/09/04/v-html/"/>
      <url>/2019/09/04/v-html/</url>
      
        <content type="html"><![CDATA[<p> &emsp;&emsp;昨天提交代码的时候，同事审核到代码里面用到v-html，要求需对后台传入内容进行转义，否则可能会有安全性问题，比如后台现在传给你的内容是依赖用户输入的，假设后台直接把那段文本传到前端，那么就容易发生xss攻击。假如用户传的是一段scrpit代码，就用可能直接导致网页瘫痪。当时我直接调用了转义函数，结果发现标签被当成文本输出了，所以我知道了所谓转义应该是指的过滤，把非法的输入给过滤。此时DOMPurify就派上用场了。<br> &emsp;&emsp;DOMPurify使用：一、引入这个库 二、可以直接定义一个全局配置常量 三、调用DOMPurify.sanitize函数对要传入给v-html的内容进行处理。e.g v-html=”DOMPurify.sanitize(itemData.value, DOMPURIFY_CONFIG)”</p><p> 全局配置参考如下：</p><p>DOMPURIFY_CONFIG = {<br> &emsp;&emsp; USE_PROFILES: {html: true},  //允许所有安全的HTML元素，但不允许SVG或MathML<br> &emsp;&emsp; ALLOWED_ATTR: [‘style’],     //允许html元素上的style属性<br> &emsp;&emsp; WHOLE_DOCUMENT: true         //返回整个文档，包括<html>标签，为false则只返回body内（不包括body）的内容，设置为true是t为了拿到<br> &emsp;&emsp; style标签<br>};</html></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>fix error——error(loading chunk xx failed.)</title>
      <link href="/2019/08/19/loadingChunkFailed/"/>
      <url>/2019/08/19/loadingChunkFailed/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;今天在项目中添加登陆功能之后，我发现第一次点击切换路由时是正常的，之后再切换时就会报错（loading chunk xx failed）一番搜索之后找到原因出在vue.config.js中的BASE_URL配置，当其在development时配置的是’./‘,去vue-cli官网看了下原来在history路由模式下，BASE_URL是不能采用相对路径的形式进行配置的。</p><p><img src="/2019/08/19/loadingChunkFailed/publicPath.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>通过小明的故事认识session</title>
      <link href="/2019/08/13/learn-session/"/>
      <url>/2019/08/13/learn-session/</url>
      
        <content type="html"><![CDATA[<p> &emsp;&emsp;今天趁着坐地铁的时间阅读了一篇文章，关于理解session的，个人觉得讲的还不错，于是进行一个小结。文章通过故事的形式阐述了session的概念，同时讲到一些客户端与服务端通信时有关安全方面的问题。<br> &emsp;&emsp;这个故事讲述了一个没有记忆力的小明开了杂货铺，通过用笔记本电脑记录用户信息的故事。安全相关——其中一种方式是笔记本电脑记录的信息就相当于session，每次用户来的时候通过提供小明随机提供的sessionID，小明通过该id在笔记本中找到顾客消费的信息，从而更好的服务客户。另外一种方式是小明通过解密加密过的cookie直接得到客户信息，但是这种方式会使得客户保存过长的cookie，不是非常好。</p><p><img src="/2019/08/13/learn-session/session.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>路由控制权限遇到的加载顺序的问题</title>
      <link href="/2019/08/11/router-control-bug/"/>
      <url>/2019/08/11/router-control-bug/</url>
      
        <content type="html"><![CDATA[<p> &emsp;&emsp;由于那个项目区分了两种用户权限，所以需要对特定用户屏蔽某个路由，防止其通过访问这个路由而看到无关的内容。这个路由下展示的内容也不算敏感，所以这次是前端直接做的屏蔽。倘若是比较敏感的内容，肯定得通过接口去控制。一开始我是选择在配置路由表的地方直接判断用户的身份，从而决定是否推入对应的路由映射。一开始测试感觉是没问题的，就是在本地切换假数据也是可以正常根据用户权限进行展示的。但是当我在本页面进行刷新时，问题出现了——就算有权限的用户也看不到页面，而只能从外面重新进入这个页面。</p><p>&emsp;&emsp;找到产生bug的原因是——<font color="red">没有理清代码的加载顺序</font>，其实之前也有其它的bug是因为这个问题造成。这种bug并不都那么容易发现的，尤其当用到该字段的地方不是首页时。因为其它页面被访问时，获取该字段的代码一般都是已执行完毕。所以当你使用一个全局可能都会用到的变量时，尽量要清楚代码执行的顺序或者用到的地方是否响应式的（window.location赋值的变量不是响应式的，可以考虑有vue2.6发布的Vue.observer来代替。如果能保证请求是同步请求的才去选择这种方式对全局变量进行赋值，就算是赋值给store.state也要注意调用的地方，如果是在某个方法里调用时，则要考虑监听这个字段的方式；如果是在template中调用时则不必监听）。</p><p>&emsp;&emsp;说回路由的问题，因为如果是从外面直接进来的话，可以直接访问store里存放的用户权限的数据，但是如果是在当前页面直接刷新，此时由于访问用户信息的接口调用比路由表要慢，所以尽管后面接口返回了信息，那页不会再改变对应的路由展示。</p><p>&emsp;&emsp;一开始我想着在当前页去进行用户信息的监听，如果是没有权限的用户，则当它访问当前页时，在自动跳转回首页，这样子做其实是问题的，但是如果考虑到之后的扩展性，就是如果这种操作是针对很多页面都需要控制的，那么久需要在各个页面去进行这种判断。后面决定统一放在ROUTER.beforeEach里面进行处理，处理这个东西的过程我主要花了比较多的时间在重构获取用户信息的方式。</p><p>&emsp;&emsp;一开始获取用户信息是放在某个页面里面去做的，后面改成在store里面的action，保持了整个文件的一致性。同时，这个请求应该是同步的（同步会对后面的加载造成阻塞，所以这个我觉得还得再考虑），这样子可以确认之后的事情是在获取了用户信息之后再进行的操作。</p><p>&emsp;&emsp;另外一个需要注意的是，beforeEach这个钩子在路由每次改变的时候都会重新加载，因此不能在里面做比较消耗性能的事情，然后注意判断，只有在加载到对应路由的时候，才去做对应的事情，而不是每次切换路由都做一些当前路由下不需要做的事情。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>同个项目合入两套代码（LSS&amp;&amp;VMS）</title>
      <link href="/2019/08/06/one-code-include-two-project/"/>
      <url>/2019/08/06/one-code-include-two-project/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;(1)先要明确公共模块，在涉及到公共部分的时候，要先确认下需求，即确认另外的项目是否也需要同样的变动，如果不需要，则需要做兼容处理；<br>&emsp;&emsp;(2)然后确认下迭代的顺序跟时间（后面迭代的分支在转测前需要把另一个代码分支合入，在合入代码有冲突时，最好是两个项目的人同时决定留下的内容），如果出现合入代码时不明确迭代发布顺序的情况，那么极有可能发生改动内容丢失的情况。</p><p>&emsp;&emsp;举个例子在LSS迭代四跟vms1.0.1的开发过程中，我负责LSS而小卓负责vms，由于我们两个没有对齐迭代的发布时间，导致他误认为LSS迭代四的发布时间比vms1.0.1的发布时间要早，所以他在vms1.0.1转测之前合入了迭代四的内容。</p><p>&emsp;&emsp;但是在得知了迭代四原来是比1.0.1晚发布的(此时迭代四的分支还没转测，尚存在一些bug)，他进行了代码的回滚，但是这次代码回滚对后面我迭代四转测前合入vms分支时造成了影响，也就是我迭代四里面有些修改由于合入了vms1.0.1而丢失了，这是因为vms在进行代码回滚的时候进行了某些删除操作，而合并分支时选择了以vms分支的操作为准而导致的。所以如果一旦合错分支时，再次进行合入要小心比对之前回滚的代码。</p><p>&emsp;&emsp;由于这次回滚是在git上直接点击还原的，相当于通过新的合并请求来还原（新的合并请求就相当于这次请求的内容都进行了更改），并不是真正意义上的还原，所以下次合入该分支时，会认为这次还原之后的分支的修改时间是比较靠后的，也就是会以此次还原的代码为准，如果这次还原是通过还原主分支，则不会发生这种事情。</p><p>&emsp;&emsp;所以：如果代码合入了主分支之后，主分支后面又没有其他的合入时，要进行回滚可以考虑直接回滚主分支,回滚主分支的风险比较大。。特别是后面有新的合入。所以最好是合入其他迭代的分支之前先考虑好。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>登录问题排查</title>
      <link href="/2019/08/04/login-problem/"/>
      <url>/2019/08/04/login-problem/</url>
      
        <content type="html"><![CDATA[<p>登录失败问题原因：<br>前端和后端联调时，后台加了一个http配置参数，导致前端cookie校验错误；</p><p>登录问题：登录时遇到接口返回“the csrf session token is missing”；</p><p>&emsp;&emsp;在后端同事一直没有定位到问题所在时，我自己尝试帮忙排查问题。一开始看到session token is missing的时候，我是觉得可能前端请求接口的时候参数有问题，但是后面发现整个请求过程跟以往并无异样。</p><p>&emsp;&emsp;后端同事比对了能在开发环境正常登陆的请求以及我本地登陆异常的接口，发现我本地登陆的时候少了一个session，此时项目经理还认为是Nginx配置的问题。</p><p>&emsp;&emsp;我忽然想起来之前工作的公司在遇到这种登陆接口挂掉的时候是通过复制能正常访问网站的cookie到本地开发环境进行登陆的，当我采取同样的方式时发现本地的浏览器的session确实比能正常登陆的少了一条，而复制了session之后也可以正常登陆。通过反馈这一现象，帮助后端同事更快地定位到错误。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>季度下拉框代码优化</title>
      <link href="/2019/08/03/quarter-select-code-opt/"/>
      <url>/2019/08/03/quarter-select-code-opt/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;结论：对比以上两种，最大的不同其实是思考逻辑。在思考这个内容的起初，我就给自己限定了思考的范围，就是我是从固定数量的季度数开始思考，然后就发现季度是要减去固定的数量才得出的，以致于写出冗长的代码。慢吃是一开始就认定这种是可以做成配置项的，所以思考的入口就很不一样，后面产出的东西就不一样。</p><p>在做这种通用性比较强的内容，一定要一开始就往可配置的方向去思考，否则可能就是做很多无用功，走很多的弯路。</p><p>优化之后的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getCurrentQuarter</span></span> () &#123;                                  //计算当前在哪个季度 </span><br><span class="line">    const MONTH = new Date().getMonth() + 1,            //用getMonth获取的月份比实际月份少一个月</span><br><span class="line">            CURRENTQUARTER = QUARTERS_OBJ[MONTH];</span><br><span class="line">            </span><br><span class="line">    <span class="built_in">return</span> CURRENTQUARTER;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line"> * 将某个年份的指定季度推进指定数组里，如果order是<span class="literal">true</span>，则是取的指定年份的靠前的年份，反之是取的是靠后的年份</span><br><span class="line"> * @param &#123;String&#125; current //年份跟季度的组合 形如2019-02 </span><br><span class="line"> * @param &#123;Number&#125; beforeNum  //需要显示的季度数，不包括当前季度</span><br><span class="line"> * @<span class="built_in">return</span> &#123;Array&#125; </span><br><span class="line"> */</span><br><span class="line">getBeforeCurrentQuarter (current, beforeNum) &#123;</span><br><span class="line">    <span class="built_in">let</span> season = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>],</span><br><span class="line">        len = season.length,</span><br><span class="line">        [year, quarter] = current.split(<span class="string">'-'</span>),</span><br><span class="line">        index = season.findIndex((item) =&gt; item === quarter),</span><br><span class="line">        arr = [],</span><br><span class="line">        loopIndex = index - 1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; beforeNum; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (loopIndex &lt; 0) &#123;</span><br><span class="line">            year--;</span><br><span class="line">            loopIndex = len - 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        arr.push(this.handleYearAndQuarter(year, season[loopIndex]));</span><br><span class="line">        loopIndex--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/08/02/hello-world/"/>
      <url>/2019/08/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo 采坑记</title>
      <link href="/2019/07/31/new-hexo/"/>
      <url>/2019/07/31/new-hexo/</url>
      
        <content type="html"><![CDATA[<p>查看了网上的教程，发现有些是部署到自己服务器的，有些是从安装git开始的，总是感觉不太适合自己，所以决定记录一个简历版本的hexo+githubpage的配合记录。</p><p>首先，你要在github上配置一个仓库，仓库名字也有讲究，比如我的GitHub名为thinkingOfBetty，所以我的仓库名字就是thinkingOfBetty.github.io。</p><p>然后按照下面的步骤进行操作：<br>（1）全局安装hexo npm install -g hexo<br>(2) 在空白文件下执行 hexo init<br>(3) hexo g (生成)   hexo s（启动服务） 执行上面两个步骤之后访问localhost:4000端口可以访问到界面<br>（4）如果你想修改主题，可以访问hexo主题网站上对应的git地址，然后进行下载$类似的命令：git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia（下载好之后配置最外层的_config.yml中的theme）<br>（5）开始写文章：source中进行编写<br>（6）上传时要特别注意：master分支上只需要上传public中的内容，之后每次更新文件的时候只需要上传修改的对应静态文件。hexo分支上传的是环境文件。两个分支上都可以配置对应的.gitIgnore文件<br>（7）下次再新的pc上进行开发时，可以先拉去master的内容，然后通过git checkout 本地分支名 origin/远程分支名<br>（8）在hexo分支上写文章，然后git add .;git commit -m xx;git push xx; hexo g -d ；之后复制对应的变更给到master中进行上传，此时即可看到界面发生改变。</p><p>（9）特别注意的是如果直接从hexo上拉代码之后npm install是不能直接跑项目的，需要在安装对应的theme主题包，因为对应的主题包push不上去，安装见步骤4，安装之后再hexo s即可在本地启动</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
